// A wildcard import would result in a `require("puppeteer")` statement
// at the top of the transpiled js file, not what we want. :-/

import { LaunchOptions } from 'puppeteer'
import { BrowserOptions as BrowserConnectOptions } from 'puppeteer'
import { ChromeArgOptions as BrowserLaunchArgumentOptions } from 'puppeteer'

export { Browser } from 'puppeteer'
export { Page } from 'puppeteer'
export { ConnectOptions } from 'puppeteer'
export { LaunchOptions } from 'puppeteer'
export { BrowserFetcher } from 'puppeteer'

// BrowserOptions renamed to BrowserConnectOptions in pptr 8.0.0
export { BrowserOptions as BrowserConnectOptions} from 'puppeteer'

// ChromeArgOptions renamed to BrowserLaunchArgumentOptions in pptr 8.0.0
export { ChromeArgOptions as BrowserLaunchArgumentOptions } from 'puppeteer'

// FetcherOptions renamed to BrowserFetcherOptions in pptr 8.0.0
export { FetcherOptions as BrowserFetcherOptions } from 'puppeteer'

export type AllLaunchOptions = LaunchOptions & BrowserLaunchArgumentOptions & BrowserConnectOptions;

import * as Puppeteer from 'puppeteer'

/**
 * Original Puppeteer API
 * @private
 */
 export interface VanillaPuppeteer {
    /** Attaches Puppeteer to an existing Chromium instance */
    connect(options?: Puppeteer.ConnectOptions): Promise<Puppeteer.Browser>
    /** The default flags that Chromium will be launched with */
    defaultArgs(options?: Puppeteer.ChromeArgOptions): string[]
    /** Path where Puppeteer expects to find bundled Chromium */
    executablePath(): string
    /** The method launches a browser instance with given arguments. The browser will be closed when the parent node.js process is closed. */
    launch(options?: Puppeteer.LaunchOptions): Promise<Puppeteer.Browser>
    /** This methods attaches Puppeteer to an existing Chromium instance. */
    createBrowserFetcher(
      options?: Puppeteer.FetcherOptions
    ): Puppeteer.BrowserFetcher
  }
  export type VanillaPuppeteerNode = VanillaPuppeteer;
